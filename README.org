# teaspoon
a little bit of typed immutability on top of CL as a treat. tsp, rhymes with lisp.

* Modular, versioned repo based distribution
Qlot
* Typed
coalton-lang/coalton
* Immutable functional
slburson/fset/
slburson/misc-extensions/
* Transducing pipelines
fosskers/cl-transducers
arrow-macros (<> ...)
* Uniform
access
* Parallelized
lparallel, mem managed
* Memoized
garlic0x1/memeozi
&&&
apply via hof macro that also hashes the function body
all fun share a single lookup space
make memory aware limitation
cull by freq
* Transactional memory and disk ops
cosmos72/stmx
shinmera/depot
* Explicit data types
() list
#() vector
{} set
#{} dict
* Setup
** Qlot

#+begin_src bash
  curl -L https://qlot.tech/installer | sh
  #add to path in .bashrc
  export PATH="${PATH}:/home/<user>/.local/share/qlot/bin"
  source .bashrc
  qlot # to test path

  #nav to project
  qlot init
  qlot add mito
  qlot install

  qlot exec sbcl # to test startup
  (quit)
#+end_src

add to dotfile
#+begin_src lisp
    (setq slime-lisp-implementations
          '((qlot ("qlot" "exec" "sbcl") :coding-system utf-8-unix)
            (sbcl ("sbcl") :coding-system utf-8-unix)))
    ;; defaulting to qlot
    ;; you can choose with negative prefix: M-- ,'
#+end_src

start emacs and in lisp repl
#+begin_src lisp
  ;; open lisp file in project first
  ;; then start repl
  (uiop:getcwd) ; expect root of project
  ql:*quicklisp-home* ; local not /home/<user>/quicklisp
  (ql:where-is-system 'mito) ; local not /home/<user>/quicklisp

  (ql:quickload :qlot)
  (qlot:init #P"/home/<user>/this-project")
  qlot:*project-root*
  (ql:where-is-system 'click) ; expect NIL
  (qlot:add 'mito)
  (ql:where-is-system 'click) ; expect local
  (qlot:install)

  ;; if project.asd file has unsaved changes ie #.project.asd exists
  ;; there are a number of bugs I should specify and report

#+end_src
